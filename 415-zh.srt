1
00:00:00,220 --> 00:00:04,220
卢比译制组 Rubinese.com

2
00:00:04,220 --> 00:00:07,220
译制：Teddy

3
00:00:07,220 --> 00:00:11,960
上周在RailsConf上宣布了rails4.0的第一个候选发布版

4
00:00:11,960 --> 00:00:18,400
这是一个升级到rails4,看到它们是否能工作并且报告任何你发现的bug的好时机。

5
00:00:19,240 --> 00:00:22,820
在RailsCasts的400集我们介绍了很多rails4的新特性

6
00:00:22,820 --> 00:00:28,220
所以本视频将重点放在rails3.2升级到rails4的过程。

7
00:00:28,220 --> 00:00:30,840
你可以在你自己的一个项目中跟随本视频的方法。

8
00:00:30,840 --> 00:00:37,760
第一步是确保我们在运行的版本是rails3.2的最新版并且所有的gem都更新了.

9
00:00:37,760 --> 00:00:40,840
我们也需要Ruby1.9.3或更高的版本.

10
00:00:41,680 --> 00:00:44,540
在开始升级之前我们要检查的程序的单元测试套件是全部通过.

11
00:00:44,540 --> 00:00:50,480
如果没有自动化测试，就意味着将需要更手动测试,这一过程将更加困难

12
00:00:50,480 --> 00:00:54,800
至少在升级前你需要做一些集成测试

13
00:00:54,800 --> 00:00:58,380
我们的应用有测试全部通过，这样我们就可以开始将它升级到rails4

14
00:00:58,380 --> 00:01:03,140
我们现在创建一个一个单独的分支来升级。

15
00:01:03,880 --> 00:01:12,600
下面我们将要把gemfile中的rails从3.2.2升级到4.0.0.rc1(或者当前的最新版)

16
00:01:12,880 --> 00:01:18,740
我们将要改变一些gem的版本号,sass到4.0.0.rc1

17
00:01:18,960 --> 00:01:24,780
coffee-rails到4.0.0,uglifier到1.3.0

18
00:01:24,980 --> 00:01:30,220
rails4移除了assets group,所以我们可以移除它

19
00:01:30,440 --> 00:01:40,540
生产环境默认不会去动态创建任何assets,并且使用静态预编译assets

20
00:01:40,600 --> 00:01:45,400
为了跟进这个变化,assets现在要尝试在生产环境被预编译.

21
00:01:45,400 --> 00:01:52,180
如果你运行rake assets:compile去与编译assets你需要将环境设置成生产环境先.

22
00:01:52,940 --> 00:01:56,940
它使得应用程序的配置文件简化了.

23
00:01:56,940 --> 00:02:02,180
在rails3中我们需要在开发和测试环境加载符合assets group的gems

24
00:02:02,180 --> 00:02:08,560
我们只要替换这段代码,让Bundler加载默认的rails环境

25
00:02:08,740 --> 00:02:13,720
如果你没有assets group在你的生产环境设置中

26
00:02:13,720 --> 00:02:17,100
你可以在这个文件中加入类似的东西在你自定义的group加载行为

27
00:02:17,100 --> 00:02:21,320
现在让我们试试运行bundle update来安装新的版本

28
00:02:21,320 --> 00:02:27,260
看上去它正确运行了,但是这个命令有时候会有一些意外的行为

29
00:02:27,260 --> 00:02:35,200
我们可以运行一个鲜为人知的命令bundle outdated来查看过期的gems

30
00:02:35,200 --> 00:02:41,800
我们发现了两个过期的gems,builder的版本比较接近,但是paper_trail有点离谱

31
00:02:41,800 --> 00:02:49,800
因为它尝试发现一个和Rails4匹配的新版本1.6.4,而2.7.1依赖rails3.

32
00:02:49,800 --> 00:02:53,440
看来我们在最新的paper_trail上遇到麻烦了.

33
00:02:53,440 --> 00:02:58,020
看来指定gem的版本是重要的

34
00:02:58,020 --> 00:03:04,340
我们的paper_trail没有被指定版本号,要确保版本号接近2.7.1

35
00:03:04,340 --> 00:03:10,260
当我们运行bundle update我们得到一个关于版本冲突的错误消息,

36
00:03:10,260 --> 00:03:18,100
paper_trail期待一个3.0版本的activeRecord,所以我们需要找到一个适用于rails4的其他版本

37
00:03:18,920 --> 00:03:22,640
paper_trail有一个git分支支持rails4

38
00:03:22,640 --> 00:03:32,340
但是这可能不适用于其他gems,所以我们需要查看每一个受影响的gem的情况

39
00:03:32,640 --> 00:03:36,260
让我们修改paper_tail的版本号为github项目的版本

40
00:03:36,260 --> 00:03:39,680
并且使用rails4分支

41
00:03:39,680 --> 00:03:44,880
当我们运行bundle update,现在它会从github获取最新的paper_tail版本

42
00:03:45,220 --> 00:03:48,960
看上去成功了,gem升级了

43
00:03:48,960 --> 00:03:51,220
我们可以尝试运行rspec了

44
00:03:51,220 --> 00:03:56,160
当我们运行时它失败了.让我们看看这里的错误消息

45
00:03:56,160 --> 00:04:00,440
输出的错误显示caches_pages方法没有被定义

46
00:04:00,940 --> 00:04:05,180
我在应用程序中使用了cache_page,但是这在Rails4中被移除了

47
00:04:05,180 --> 00:04:10,960
同样被rails4移除的还有和observers,protected_attributes和ActiveResource等等

48
00:04:11,280 --> 00:04:15,600
只要继续使用这些gems我们可以继续使用这些功能

49
00:04:15,960 --> 00:04:20,880
让我们看看gemfile,我只要粘贴列出的这些gems,我推荐的在升级的过程中加入它们

50
00:04:20,880 --> 00:04:24,880
还有一些其他的比如ActiveResource

51
00:04:24,940 --> 00:04:30,700
加入这些gems,这样我们在后面就不会有报错了

52
00:04:30,700 --> 00:04:36,780
当我们做这样一个主版本升级时,应该让应用程序尽快进入一个工作状态.

53
00:04:36,820 --> 00:04:41,900
尽量避免大量的重构和改变,加入这些gems很有帮助

54
00:04:41,900 --> 00:04:48,220
当我们的测试通过了我们可以开始清理代码并且可能会改变它们来使用不依赖这些gem的技术.

55
00:04:48,360 --> 00:04:55,320
运行bundle来安装这些gems,然后尝试运行我的specs再次来看看我们是否可以让他们通过.

56
00:04:55,800 --> 00:05:08,480
这次,除了一些警告,我们看到了一个和路由有关的错误

57
00:05:08,480 --> 00:05:12,060
因为match方法不再被接受

58
00:05:12,060 --> 00:05:14,980
看看routes中的这个match方法

59
00:05:14,980 --> 00:05:21,320
通常我们应该仅仅用get代替它但是如果我们想要支持多个方法我们可以在后面这样加入

60
00:05:21,480 --> 00:05:24,860
或者如果你想要加入多个支持,使用via即可

61
00:05:24,860 --> 00:05:31,360
一个options的数组或者all来支持所有的请求类型

62
00:05:31,960 --> 00:05:37,040
让我们仅仅写一个get请求,再次运行rspec看看

63
00:05:37,040 --> 00:05:43,420
但是有很多失败,大多数是关于mass-assigning

64
00:05:43,420 --> 00:05:46,840
protected_attributes包含一个Version模型在paper_tail中

65
00:05:46,840 --> 00:05:54,300
这在rails4中是一个gem strong_parameter 但是我们还是使用 protected_attributes

66
00:05:54,720 --> 00:05:58,500
我们通过修改我们的程序的配置文件来绕开,

67
00:05:58,500 --> 00:06:02,360
active_record.whitelist_attributes是true

68
00:06:02,360 --> 00:06:09,620
代表它预期attr_accessible被定义在每个模型里,这没什么当我们迁移我们的程序来使用strong_parameters.

69
00:06:09,620 --> 00:06:12,120
仅仅把它设置成false就行了

70
00:06:12,120 --> 00:06:19,020
让我们运行rspec,看上去它们都通过了,哦也

71
00:06:19,020 --> 00:06:23,100
这里有一个警告

72
00:06:23,100 --> 00:06:39,060
看看尝试debug,有很多配置选项,比如whiny_nils不再是必要的了

73
00:06:39,060 --> 00:06:41,440
我将要移除whiny_nils

74
00:06:41,440 --> 00:06:47,940
加上了一个eager_load的选项,并在开发环境中设置为false

75
00:06:47,940 --> 00:06:55,220
我们也可以移除其他不再需要的选项.

76
00:06:55,220 --> 00:06:57,740
下面我们再配置生产环境

77
00:06:57,740 --> 00:07:01,100
我们需要设置eager_load为true

78
00:07:01,100 --> 00:07:06,820
compress这行加上js,把true变成uglifier

79
00:07:08,900 --> 00:07:17,880
移除wihyn_nil并且设置eager_load为false,也移除了mass_assignment_sanitizer因为我们使用strong_params

80
00:07:17,880 --> 00:07:22,740
快速的看一下assets pip line,如果我们看看application配置文件

81
00:07:22,740 --> 00:07:28,240
assets.enabled为enabled,然后这并不是必要的

82
00:07:28,240 --> 00:07:34,780
在rails4中assetspipline默认设置就是enable的,所以如果你不想启用,就要设置成false

83
00:07:34,780 --> 00:07:37,540
如果你要,那么只要移除这行配置就行了

84
00:07:37,540 --> 00:07:42,200
我要更改的配置是token

85
00:07:42,200 --> 00:07:47,920
在rails4中,被重命名为secret_base

86
00:07:47,920 --> 00:07:52,680
你要同时指定secret_token和secret_base

87
00:07:52,680 --> 00:07:55,200
当迁移rails3到rails4时

88
00:07:55,200 --> 00:08:02,460
当转移成功后你可以删除secret_token,你应该使用不同的key_base

89
00:08:02,460 --> 00:08:10,560
这是必要的因为我们在从一个序列化的cookie转到一个加密的cookie,

90
00:08:10,560 --> 00:08:16,040
这防止用户可以简单的使用他们的seesion cookies查看内容.

91
00:08:16,520 --> 00:08:23,540
我们已经做了一大堆配置的改动,但是还是没有包含所有的.我们将会创建一个新的rails4的应用程序

92
00:08:23,540 --> 00:08:29,300
这样我们可以看看生成的配置文件来对比我们升级的看看是否需要覆盖.

93
00:08:29,300 --> 00:08:36,640
这些改变都被摆好位置了我们将要尝试运行我们的rspecs再次来确保我们没有打破和人东西

94
00:08:36,640 --> 00:08:41,940
所有的测试依然都通过了,但是还是有很多deprecation warnings

95
00:08:41,940 --> 00:08:45,880
其中之一是在Episode模型中,

96
00:08:45,880 --> 00:08:52,520
当定义一个命名空间时需要把一个可调用的对象作为第二个参数

97
00:08:52,520 --> 00:08:55,820
比如lambda表达式,让我们这样替换掉

98
00:08:55,820 --> 00:09:02,400
这是必要的因为我们常常需要得到一些动态信息比如时间

99
00:09:02,400 --> 00:09:09,500
如果没有lambda表达式原来的代码会得到类被加载的时间,而不是scope被调用的时间.

100
00:09:09,500 --> 00:09:16,740
另一个仍然存在的deprecation是在EpisodesControllers的index action

101
00:09:16,740 --> 00:09:21,980
这里我把Episode.published.find_all_by_pro设置为false

102
00:09:21,980 --> 00:09:27,840
动态查询已经不被支持了,我们改成where

103
00:09:27,840 --> 00:09:31,800
设置pro为false

104
00:09:31,800 --> 00:09:37,940
再次运行rspec,测试都通过并且没有警告,哦也

105
00:09:38,360 --> 00:09:43,880
现在我们已经清理了deprecations,我们可以专注与其他迁移工作比如strong_parameters.

106
00:09:43,880 --> 00:09:49,560
这些内容episode 371 中提到了但是我们可以很快的做一个修改

107
00:09:49,560 --> 00:09:54,820
通常是一个移动 mass-assignment restrictions到模型外面来替代使用attr_accessible

108
00:09:54,820 --> 00:09:58,720
我们把验证放在 controller 中,我们移除 Episode 模型的attributes

109
00:09:59,580 --> 00:10:04,060
到controller中看看底下的定义

110
00:10:04,060 --> 00:10:09,920
一个私有方法叫做episode_params.这是约定俗成的,虽然有其他的名字可以使用.

111
00:10:09,940 --> 00:10:13,240
在这个方法中我们调用了permit在参数中,

112
00:10:13,480 --> 00:10:17,900
传入这些允许的参数

113
00:10:17,900 --> 00:10:25,540
把permit改成require

114
00:10:25,540 --> 00:10:31,740
来确保epiode的hash值是可得到的,也不会报空指针异常

115
00:10:31,740 --> 00:10:39,100
下面我们只要在表单中使用允许的episode的参数

116
00:10:39,100 --> 00:10:42,660
在创建或更新episode时

117
00:10:42,660 --> 00:10:49,940
一旦我们完成了这个,在任何地方都移除了protected_attributes,因为这不是必要的了

118
00:10:49,940 --> 00:10:58,760
我们也可以移除关于它的其他配置选项,从app config文件诸如config.active_record.whitelist_attributes.

119
00:10:59,640 --> 00:11:03,680
rspec仍然通过

120
00:11:04,200 --> 00:11:09,180
我们已经从我们的应用程序中,移除了过度阶段的gems中的一个

121
00:11:09,180 --> 00:11:12,700
rails-observers用来处理回调函数

122
00:11:12,700 --> 00:11:17,820
page_cache还有很多用到的地方,我们要继续使用它

123
00:11:17,820 --> 00:11:23,440
在321中提到的HTTP缓存,可以很好的替代action_caching并且我们能够移除activerecord-deprecated_finders.

124
00:11:23,440 --> 00:11:34,520
事实上,它是一个rails4的依赖,虽然它会在rails4.1中被移除.

125
00:11:34,900 --> 00:11:40,560
最后我们将会提到一些小的改变我们可以做的.第一个是在controller中

126
00:11:40,560 --> 00:11:48,680
before_filter现在改成before_action.这不是一个deprecation warning但是是新的名字更清晰.

127
00:11:48,680 --> 00:11:53,720
在路由文件如果我们使用put

128
00:11:53,720 --> 00:11:59,640
我们可以使用patch来更新一条记录.

129
00:11:59,640 --> 00:12:08,300
如果我们有一个app有一个/test目录,结构有些改变,有必要看看rails4的变化.

130
00:12:08,300 --> 00:12:17,780
另外 /vendor/plugins 不再被使用,所以我们可以移动到一个gem或者lib中

131
00:12:17,880 --> 00:12:23,580
我们成功的把一个rails3的程序升级到了rails4

132
00:12:24,000 --> 00:12:32,010
有很多其他的rails4的特性我们没有提到,但是以前的视频有提及,所以看看rails4的分类吧

133
00:12:32,020 --> 00:12:38,140
还有一些资料在relases candidate的博客里

134
00:12:38,580 --> 00:12:40,860
结束了,谢谢观看.

135
00:12:40,860 --> 00:12:42,860
更多视频请访问 Rubinese.com

