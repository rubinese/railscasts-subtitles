1
00:00:00,220 --> 00:00:04,220
卢比译制组 Rubinese.com

2
00:00:04,220 --> 00:00:07,220
译制：Teddy

3
00:00:07,220 --> 00:00:11,960
上周在 RailsConf 上宣布了 rails4.0 的第一个候选发布版

4
00:00:11,960 --> 00:00:18,400
这是一个升级到 rails4,看到它们是否能工作并且报告任何你发现的 bug 的好时机。

5
00:00:19,240 --> 00:00:22,820
在 RailsCasts 的400集我们介绍了很多 rails4 的新特性

6
00:00:22,820 --> 00:00:28,220
所以本视频将重点放在 rails3.2 升级到 rails4 的过程。

7
00:00:28,220 --> 00:00:30,840
你可以在你自己的一个项目中跟随本视频的方法。

8
00:00:30,840 --> 00:00:37,760
第一步是确保我们在运行的版本是 rails3.2 的最新版并且所有的 gem 都更新了.

9
00:00:37,760 --> 00:00:40,840
我们也需要 Ruby1.9.3 或更高的版本.

10
00:00:41,680 --> 00:00:44,540
在开始升级之前我们要检查的程序的单元测试套件全部通过.

11
00:00:44,540 --> 00:00:50,480
如果没有自动化测试，就意味着将需要更手动测试,这一过程将更加困难

12
00:00:50,480 --> 00:00:53,800
至少在升级前你需要做一些集成测试

13
00:00:53,800 --> 00:00:58,380
我们的应用有测试全部通过，这样我们就可以开始将它升级到 rails4

14
00:00:58,380 --> 00:01:03,140
我们现在创建一个一个单独的分支来升级。

15
00:01:03,880 --> 00:01:12,600
下面我们将要把 gemfile 中的 rails 从3.2.2升级到4.0.0.rc1(或者当前的最新版)

16
00:01:12,880 --> 00:01:18,740
我们将要改变一些gem的版本号, sass 到 4.0.0.rc1

17
00:01:18,960 --> 00:01:24,780
coffee-rails 到 4.0.0, uglifier 到1.3.0

18
00:01:24,980 --> 00:01:30,220
rails4 移除了 assets group,所以我们可以移除它

19
00:01:30,440 --> 00:01:40,540
生产环境默认不会去动态创建任何 assets ,并且使用静态预编译 assets

20
00:01:40,600 --> 00:01:45,400
为了跟进这个变化, assets 现在要尝试在生产环境被预编译.

21
00:01:45,400 --> 00:01:52,180
如果你运行 rake assets:compile 去与编译 assets 你需要将环境设置成生产环境先.

22
00:01:52,940 --> 00:01:56,940
它使得应用程序的配置文件简化了.

23
00:01:56,940 --> 00:02:02,180
在 rails3 中我们需要在开发和测试环境加载符合 assets group 的 gems

24
00:02:02,180 --> 00:02:08,560
我们只要替换这段代码,让 Bundler 加载默认的 rails 环境

25
00:02:08,740 --> 00:02:13,720
如果你没有 assets group 在你的生产环境设置中

26
00:02:13,720 --> 00:02:17,100
你可以在这个文件中加入类似的东西在你自定义的 group 加载行为

27
00:02:17,100 --> 00:02:21,320
现在让我们试试运行 bundle update 来安装新的版本

28
00:02:21,320 --> 00:02:27,260
看上去它正确运行了,但是这个命令有时候会有一些意外的行为

29
00:02:27,260 --> 00:02:35,200
我们可以运行一个鲜为人知的命令 bundle outdated 来查看过期的 gems

30
00:02:35,200 --> 00:02:41,800
我们发现了两个过期的 gems , builder 的版本比较接近,但是 paper_trail 有点离谱

31
00:02:41,800 --> 00:02:49,800
因为它尝试发现一个和 rails4 匹配的新版本1.6.4,而2.7.1依赖 rails3 .

32
00:02:49,800 --> 00:02:53,440
看来我们在最新的 paper_trail 上遇到麻烦了.

33
00:02:53,440 --> 00:02:58,020
看来指定 gem 的版本是重要的

34
00:02:58,020 --> 00:03:04,340
我们的 paper_trail 没有被指定版本号,要确保版本号接近2.7.1

35
00:03:04,340 --> 00:03:10,260
当我们运行 bundle update 我们得到一个关于版本冲突的错误消息,

36
00:03:10,260 --> 00:03:18,100
paper_trail 期待一个3.0版本的 activeRecord ,所以我们需要找到一个适用于 rails4 的其他版本

37
00:03:18,920 --> 00:03:22,640
paper_trail 有一个 git 分支支持 rails4

38
00:03:22,640 --> 00:03:32,340
但是这可能不适用于其他 gems ,所以我们需要查看每一个受影响的 gem 的情况

39
00:03:32,640 --> 00:03:36,260
让我们修改 paper_tail 的版本号为 github 项目的版本

40
00:03:36,260 --> 00:03:39,680
并且使用 rails4 分支

41
00:03:39,680 --> 00:03:44,880
当我们运行 bundle update ,现在它会从 github 获取最新的 paper_tail 版本

42
00:03:45,220 --> 00:03:48,960
看上去成功了, gem 升级了

43
00:03:48,960 --> 00:03:51,220
我们可以尝试运行 rspec 了

44
00:03:51,220 --> 00:03:56,160
当我们运行时它失败了.让我们看看这里的错误消息

45
00:03:56,160 --> 00:04:00,440
输出的错误显示 caches_pages 方法没有被定义

46
00:04:00,940 --> 00:04:05,180
我在应用程序中使用了 cache_page ,但是这在 rails4 中被移除了

47
00:04:05,180 --> 00:04:10,960
同样被 rails4 移除的还有和 observers , protected_attributes 和 ActiveResource 等等

48
00:04:11,280 --> 00:04:15,600
只要继续使用这些 gems 我们可以继续使用这些功能

49
00:04:15,960 --> 00:04:20,880
让我们看看 gemfile ,我只要粘贴列出的这些 gems ,我推荐的在升级的过程中加入它们

50
00:04:20,880 --> 00:04:24,880
还有一些其他的比如 ActiveResource

51
00:04:24,940 --> 00:04:30,700
加入这些 gems ,这样我们在后面就不会有报错了

52
00:04:30,700 --> 00:04:36,780
当我们做这样一个主版本升级时,应该让应用程序尽快进入一个工作状态.

53
00:04:36,820 --> 00:04:41,900
尽量避免大量的重构和改变,加入这些 gems 很有帮助

54
00:04:41,900 --> 00:04:48,220
当我们的测试通过了我们可以开始清理代码并且可能会改变它们来使用不依赖这些 gem 的技术.

55
00:04:48,360 --> 00:04:55,320
运行 bundle 来安装这些 gems ,然后尝试运行我的 specs 再次来看看我们是否可以让他们通过.

56
00:04:55,800 --> 00:05:08,480
这次,除了一些警告,我们看到了一个和路由有关的错误

57
00:05:08,480 --> 00:05:12,060
因为 match 方法不再被接受

58
00:05:12,060 --> 00:05:14,980
看看 routes 中的这个 match 方法

59
00:05:14,980 --> 00:05:21,320
通常我们应该仅仅用 get 代替它但是如果我们想要支持多个方法我们可以在后面这样加入

60
00:05:21,480 --> 00:05:24,860
或者如果你想要加入多个支持,使用 via 即可

61
00:05:24,860 --> 00:05:31,360
一个 options 的数组或者 all 来支持所有的请求类型

62
00:05:31,960 --> 00:05:37,040
让我们仅仅写一个 get 请求,再次运行 rspec 看看

63
00:05:37,040 --> 00:05:43,420
但是有很多失败,大多数是关于 mass-assigning

64
00:05:43,420 --> 00:05:46,840
protected_attributes 包含一个 Version 模型在 paper_tail 中

65
00:05:46,840 --> 00:05:54,300
这在 rails4 中是一个 gem strong_parameter 但是我们还是使用 protected_attributes

66
00:05:54,720 --> 00:05:58,500
我们通过修改我们的程序的配置文件来绕开

67
00:05:58,500 --> 00:06:02,360
active_record.whitelist_attributes 是 true

68
00:06:02,360 --> 00:06:09,620
代表它预期 attr_accessible 被定义在每个模型里.

69
00:06:09,620 --> 00:06:12,120
当我们迁移我们的程序来使用 strong_parameters .仅仅把它设置成 false 就行了

70
00:06:12,120 --> 00:06:19,020
让我们运行 rspec ,看上去它们都通过了,哦也

71
00:06:19,020 --> 00:06:23,100
这里有一个警告

72
00:06:23,100 --> 00:06:39,060
看看尝试 debug ,有很多配置选项,比如 whiny_nils 不再是必要的了

73
00:06:39,060 --> 00:06:41,440
我将要移除 whiny_nils

74
00:06:41,440 --> 00:06:47,940
加上了一个 eager_load 的选项,并在开发环境中设置为 false

75
00:06:47,940 --> 00:06:55,220
我们也可以移除其他不再需要的选项.

76
00:06:55,220 --> 00:06:57,740
下面我们再配置生产环境

77
00:06:57,740 --> 00:07:01,100
我们需要设置 eager_load 为 true

78
00:07:01,100 --> 00:07:06,820
compress 这行加上 js ,把 true 变成 uglifier

79
00:07:08,900 --> 00:07:12,880
移除 wihyn_nil 并且设置 eager_load 为 false

80
00:07:12,880 --> 00:07:17,880
移除 mass_assignment_sanitizer 因为我们使用 strong_params

81
00:07:17,880 --> 00:07:22,740
快速的看一下 assets pip line,如果我们看看 application 配置文件

82
00:07:22,740 --> 00:07:28,240
assets.enabled 为 enabled ,然后这并不是必要的

83
00:07:28,240 --> 00:07:31,780
在 rails4 中 assetspipline 默认设置就是 enable 的

84
00:07:31,780 --> 00:07:34,780
所以如果你不想启用,就要设置成 false

85
00:07:34,780 --> 00:07:37,540
如果你要,那么只要移除这行配置就行了

86
00:07:37,540 --> 00:07:42,200
我要更改的配置是 token

87
00:07:42,200 --> 00:07:47,920
在 rails4 中被重命名为 secret_key_base

88
00:07:47,920 --> 00:07:52,680
你要同时指定 secret_token 和 secret_base

89
00:07:52,680 --> 00:07:55,200
当迁移 rails3 到 rails4 时

90
00:07:55,200 --> 00:08:02,460
当转移成功后你可以删除 secret_token ,你应该使用不同的 key_base

91
00:08:02,460 --> 00:08:10,560
这是必要的因为我们在从一个序列化的 cookie 转到一个加密的 cookie

92
00:08:10,560 --> 00:08:16,040
这防止用户可以简单的使用他们的 seesion cookies 查看内容.

93
00:08:16,520 --> 00:08:20,540
我们已经做了一大堆配置的改动,但是还是没有包含所有的.

94
00:08:20,540 --> 00:08:20,540
我们将会创建一个新的 rails4 的应用程序

95
00:08:23,540 --> 00:08:29,300
这样我们可以看看生成的配置文件来对比我们升级的看看是否需要覆盖.

96
00:08:29,300 --> 00:08:36,640
运行我们的 rspecs 再次来确保我们没有打破任何东西

97
00:08:36,640 --> 00:08:41,940
所有的测试依然都通过了,但是还是有很多 deprecation warnings

98
00:08:41,940 --> 00:08:45,880
其中之一是在 Episode 模型中,

99
00:08:45,880 --> 00:08:52,520
当定义一个命名空间时需要把一个可调用的对象作为第二个参数

100
00:08:52,520 --> 00:08:55,820
比如 lambda 表达式,让我们这样替换掉

101
00:08:55,820 --> 00:09:02,400
这是必要的因为我们常常需要得到一些动态信息比如时间

102
00:09:02,400 --> 00:09:09,500
如果没有 lambda 表达式原来的代码会得到类被加载的时间,而不是 scope 被调用的时间.

103
00:09:09,500 --> 00:09:16,740
另一个仍然存在的 deprecation 是在 EpisodesControllers 的 index action

104
00:09:16,740 --> 00:09:21,980
这里我把 Episode.published.find_all_by_pro 设置为 false

105
00:09:21,980 --> 00:09:27,840
动态查询已经不被支持了,我们改成 where

106
00:09:27,840 --> 00:09:31,800
设置 pro 为 false

107
00:09:31,800 --> 00:09:37,940
再次运行 rspec ,测试都通过并且没有警告,哦也

108
00:09:38,360 --> 00:09:43,880
现在我们已经清理了 deprecations ,我们可以专注与其他迁移工作比如 strong_parameters.

109
00:09:43,880 --> 00:09:49,560
这些内容 episode 371 中提到了但是我们可以很快的做一个修改

110
00:09:49,560 --> 00:09:54,820
通常是一个移动 mass-assignment restrictions 到模型外面来替代使用 attr_accessible

111
00:09:54,820 --> 00:09:58,720
我们把验证放在 controller 中,我们移除 Episode 模型的 attributes

112
00:09:59,580 --> 00:10:04,060
到 controller 中看看底下的定义

113
00:10:04,060 --> 00:10:09,920
一个私有方法叫做 episode_params .这是约定俗成的,虽然有其他的名字可以使用.

114
00:10:09,940 --> 00:10:13,240
在这个方法中我们调用了 permit 在参数中,

115
00:10:13,480 --> 00:10:17,900
传入这些允许的参数

116
00:10:17,900 --> 00:10:25,540
把 permit 改成 require

117
00:10:25,540 --> 00:10:31,740
来确保 epiode 的 hash 值是可得到的,也不会报空指针异常

118
00:10:31,740 --> 00:10:39,100
下面我们只要在表单中使用允许的 episode 的参数

119
00:10:39,100 --> 00:10:42,660
在创建或更新 episode 时

120
00:10:42,660 --> 00:10:49,940
一旦我们完成了这个,在任何地方都移除了 protected_attributes ,因为这不是必要的了

121
00:10:49,940 --> 00:10:54,760
我们也可以移除关于它的其他配置选项

122
00:10:54,760 --> 00:10:59,640
从 app config 文件诸如 config.active_record.whitelist_attributes

123
00:10:59,640 --> 00:11:03,680
rspec 仍然通过

124
00:11:04,200 --> 00:11:09,180
我们已经从我们的应用程序中,移除了过度阶段的 gems 中的一个

125
00:11:09,180 --> 00:11:12,700
rails-observers 用来处理回调函数

126
00:11:12,700 --> 00:11:17,820
page_caching 还有很多用到的地方,我们要继续使用它

127
00:11:17,820 --> 00:11:20,440
在321中提到的 HTTP 缓存,可以很好的替代 action_caching

128
00:11:20,440 --> 00:11:23,440
这样我们能够移除 activerecord-deprecated_finders.

129
00:11:23,440 --> 00:11:34,520
事实上,它是一个 rails4 的依赖,虽然它会在 rails4.1 中被移除.

130
00:11:34,900 --> 00:11:40,560
最后我们将会提到一些小的改变.第一个是在 controller 中

131
00:11:40,560 --> 00:11:48,680
before_filter 现在改成 before_action .这不是一个 deprecation warning 但是是新的名字更清晰.

132
00:11:48,680 --> 00:11:53,720
在路由文件如果我们使用 put

133
00:11:53,720 --> 00:11:59,640
我们可以使用 patch 来更新一条记录.

134
00:11:59,640 --> 00:12:08,300
如果我们有一个 app 有一个 /test 目录,结构有些改变,有必要看看 rails4 的变化.

135
00:12:08,300 --> 00:12:17,780
另外 /vendor/plugins 不再被使用,所以我们可以移动到一个 gem 或者 lib 中

136
00:12:17,880 --> 00:12:23,580
我们成功的把一个 rails3 的程序升级到了 rails4

137
00:12:24,000 --> 00:12:32,010
有很多其他的 rails4 的特性我们没有提到,但是以前的视频有提及,所以看看 rails4 的分类吧

138
00:12:32,020 --> 00:12:38,140
还有一些资料在 relases candidate 的博客里

139
00:12:38,580 --> 00:12:40,860
结束了,谢谢观看.

140
00:12:40,860 --> 00:12:42,860
更多视频请访问 Rubinese.com

